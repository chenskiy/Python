# ## Задачи занятия 3
# 1. Программа "Калькулятор кредитов" Рассчитайте месячные выплаты (m) и суммарную выплату (s) по кредиту. 
# О кредите известно, что он составляет n рублей, берется на y лет, под p процентов. 
# Месячные выплаты находятся по формуле: m = (n * p * (1 + p)y) / (12 * ((1 + p)y – 1)), где p выражается в долях единицы, а не процентах. 
# Суммарная выплата представляет собой выплаты за все месяцы каждого года: s = (m * 12) * y 
# Запросите размер кредита в рублях и копейках, количество целых лет (в годах) и процентную ставку в процентах с точностью до сотых. 
# Распечатайте месячные выплаты и сумму кредита в рублях и копейках.
# Пример:
# - Введите сумму кредита (рубли и копейки): 543.25
# - Введите срок кредита в годах (целое число): 2
# - Введите процентную ставку в процентах с точностью до сотых (без знака "%"): 7.45 
# - Месячные выплаты составят 25.2 руб. 
# Суммарная выплата равна 604.68 руб.

'''
n = 543.25
y = 2
p = 0.2
m = (n * p * (1 + p)* y) / (12 * ((1 + p)* y - 1))
s = ((m * 12) * y)
print(round (m, 2))
print(round(s, 2))
'''

# 2. Программа "Блог. Начало." Создайте в программе словарь с историями о себе. 
# В качестве ключа сохраните название истории (строчными буквами), а в качестве значения - текст самой истории. 
# В цикле выведите название истории прописными буквами (большими) и с новой строки текст истории. Между историями выведите пустую строку.
# *Пример:*
# ПЕРВАЯ
# Моя первая история. Короткая, но интересная.
# РЫБАЛКА
# История про рыбалку. Уха, лодка, палатка и приключения на воде.
# НОВОГОДНЯЯ
# Приключения в Новый год. Как мы встретили одноклассников через 25 лет и отправили их кормить рыб хлебом.

'''
my_story = \
    {
        "ПЕРВАЯ" : "Моя первая история. Короткая, но интересная.", 
        "РЫБАЛКА" : "История про рыбалку. Уха, лодка, палатка и приключения на воде.",
        "НОВОГОДНЯЯ" : "Приключения в Новый год. Как мы встретили одноклассников через 25 лет и отправили их кормить рыб хлебом."
    }
for i in my_story.keys():
    print(i)
    print(my_story[i])
'''

# 3. Задайте список из N элементов, заполненных числами из промежутка [-N, N]. Найдите произведение элементов на указанных позициях. 
# Каждая позиция хранится отдельной строкой в  файле file.txt.
'''
N = int(input('N = '))
spisok = []
for i in range (-N, N+1):
    spisok.append(i)
print(spisok)
result = 'file.txt'
data = open(result,"r")
proizv = 1
for line in data:
    proizv *= spisok[int(line)]
print(proizv)
data.close
'''

# 4. Для натурального n создать словарь индекс-значение, состоящий из элементов последовательности 3n + 1.
#     *Пример:*
#     - Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}
'''
n = int(input())
d = {}
for i in range (1, n+1):
    d[i] = (3*i) + 1
print (d)
'''
# 5. Задайте список(произвольный). Напишите программу, которая определит, присутствует ли в заданном списке строк некое число.
'''
spisok = [4, 7, 'red', 13, 16, 'u2']
a = int(input())
b = 0
for i in range(len(spisok)):
    if a == spisok[i]:
        b = 1
if b == 1: print ('true')
else: print('false')
'''
# 6. Напишите программу, которая определит позицию второго вхождения строки в списке либо сообщит, что её нет(по индексу).
# *Пример:*
# - список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
# - список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
# - список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
# - список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
# - список: [], ищем: "123", ответ: -1
'''
spisok = ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"]
a = "йцу"
b = 0
for i in range(len(spisok)):
    if spisok[i] == a:
        b += 1
        if b == 2:
            c = i
            print(c)
            break
if b < 2: print(-1)
'''

# 7. Программа "Именной фильтр". Напишите функцию, которая принимает на вход список с именами людей и возвращает новый список с именами, которые начинаются на гласную букву. 
# В новом списке имя должно начинаться с прописной (большой) буквы, даже если изначально было написано со строчной(маленькой).
# *Пример:*
#  - Введите имена через пробел: Никонор иван Харитон Ульяна яков
# Функция вернула ['Иван', 'Ульяна', 'Яков']
'''
def name_sort(list):
    vowels_set = {"А","У","О","Е","И","Я","Ю","Ё","Э","Ы"}
    list_new = []
    for i in list:
        time_str = i.capitalize()
        if time_str[0] in vowels_set:
            list_new.append(time_str)
    return list_new

list = ["Никонор", "иван", "Харитон", "Ульяна", "яков"]

print(name_sort(list))
'''

# 8. Программа "Среднее арифметическое". Введите целое число от 3 до 20 (число n). Запросите n вещественных чисел и сохраните их в список. 
# Вызовите функцию, которая принимает на вход список (один аргумент) и возвращает среднее арифметическое всех элементов списка. 
# Результат работы функции сохраните в переменную и выведите на экран.
# *Пример:*
# - Введите целое число от 3 до 20 3
# - Введите число номер 1: 4
# - Введите число номер 2: 5
# - Введите число номер 3: 6
# Введено чисел: 3
# Это числа: [4.0, 5.0, 6.0]
# Функция вернула среднее арифметическое:  5.0

def arithmetic_mean(num):
    spisok = []
    for i in range (num):
        spisok.append(float(input(f'Введите число номер {i+1}: ')))
    print (spisok)
    sum = 0
    for i in spisok:
        sum += i
    return sum/len(spisok)

n = int(input('от 3 до 20: '))
print(arithmetic_mean(n))
